generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  username            String
  email               String     @unique
  password            String
  profileImg          String?
  role                UserRole   @default(CUSTOMER)
  isDelated           Boolean    @default(false)
  needsPasswordChange Boolean    @default(true)
  status              UserStatus @default(ACTIVE)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  shop                Shop?
  cart                Cart?
  order               Order[]
  address             Address[]
  review              Review[]
  follower            Follower[]

  @@map("users")
}

model Shop {
  id          String     @id @default(uuid())
  vendorId    String     @unique
  vendor      User       @relation(fields: [vendorId], references: [id])
  name        String
  logo        String
  description String
  status      ShopStatus @default(ACTIVE)
  isDelated   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Products    Products[]
  cart        Cart[]
  follower    Follower[]

  @@map("shop")
}

model Categories {
  id          String     @id @default(uuid())
  name        String     @unique
  categoryImg String?
  isDelated   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Products[]

  @@map("categories")
}

model Products {
  id             String     @id @default(uuid())
  shopId         String
  shop           Shop       @relation(fields: [shopId], references: [id])
  categoryId     String
  category       Categories @relation(fields: [categoryId], references: [id])
  name           String
  price          Float
  description    String
  inventoryCount Int
  discount       Float?
  productImg     String?
  isDelated      Boolean    @default(false)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  cartItem  CartItem[]
  orderItem OrderItem[]
  review    Review[]

  @@map("products")
}

model Cart {
  id         String  @id @default(uuid())
  customerId String  @unique
  user       User    @relation(fields: [customerId], references: [id])
  vendorId   String?
  vendor     Shop?   @relation(fields: [vendorId], references: [id])

  isDelated Boolean @default(false)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItem  CartItem[]

  @@map("cart")
}

model CartItem {
  id     String @id @default(uuid())
  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id])

  productId String
  product   Products @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDelated Boolean @default(false)

  @@unique([cartId, productId])
  @@map("cartItem")
}

model Order {
  id         String      @id @default(uuid())
  customerId String
  customer   User        @relation(fields: [customerId], references: [id])
  totalPrice Float
  status     OrderStatus @default(PENDING)

  isDelated  Boolean @default(false)
  trxnNumber String? @unique

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  orderItem OrderItem[]

  @@map("order")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Products @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  isDelated  Boolean @default(false)
  isReviewed Boolean @default(false)

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review?

  @@map("orderItem")
}

model Review {
  id          String    @id @default(uuid())
  orderItemId String    @unique
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  productId   String
  product     Products  @relation(fields: [productId], references: [id])
  rating      Int
  comment     String

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  @@unique([cartId, productId])

  @@map("reviews")
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("address")
}

model Follower {
  id         String @id @default(cuid())
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])
  shopId     String
  shop       Shop   @relation(fields: [shopId], references: [id])

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([customerId, shopId])
  @@map("follower")
}

model Coupon {
  id   String @id @default(uuid())
  code String @unique

  discountValue Float

  usageLimit Int
  usedCount  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  isDeleted Boolean @default(false)

  @@map("coupon")
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  SUSPENDED
}

enum ShopStatus {
  BLOCKED
  ACTIVE
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
